diff --git a/Practicas/Practica10/p10/elipic_curves/src/EllipticCurve.py b/Practicas/Practica10/p10/elipic_curves/src/EllipticCurve.py
index 764d68d..ba99dd9 100644
--- a/Practicas/Practica10/p10/elipic_curves/src/EllipticCurve.py
+++ b/Practicas/Practica10/p10/elipic_curves/src/EllipticCurve.py
@@ -9,34 +9,94 @@ class EllipticCurve:
 
     def __init__(self, prime = 3, a = 1, b = 1):
         '''Construimos la curva elíptica a partir de los parámetros a, b modulo p'''
+        self.original_a, self.original_b = a, b
+        self.a, self.b = a % prime, b % prime
+        self.prime = prime
+        self.points = self.get_points()
 
     def __str__(self):
         '''La curva debe ser representada como: y^2 = x^3 + ax + b mod p'''
+        return f"y^2 = x^3 + {self.original_a}x + {self.original_b} mod {self.prime}"
 
     def isInCurve(self, point):
         '''Nos dice si un punto "point" pertenece a esta curva'''
+        if point is None:
+            return True
+        if not isinstance(point, Point):
+            return False
+        return (point.y ** 2) % self.prime == (point.x ** 3 + self.a * point.x + self.b) % self.prime
 
     def get_points(self):
         '''Nos da todos los puntos que pertenecen a la curva elíptica'''
+        points = [None]
+        for x in range(self.prime):
+            right = (x ** 3 + self.a * x + self.b) % self.prime
+            for y in range(self.prime):
+                if (y * y) % self.prime == right:
+                    points.append(Point(x, y))
+        return points
 
     def sum(self, p, q):
         '''Suma p + q  regresando un nuevo punto modulo prime
         como está definido en las curvas elípticas. Recuerda que el punto al
         infinito funciona como neutro aditivo'''
+        if p is None:
+            return q
+        if q is None:
+            return p
+
+        if p.x == q.x and p.y == inv_add(q.y, self.prime):
+            return None
+
+        if p == q:
+            if p.y == 0:
+                return None
+            m = ((3 * p.x ** 2 + self.a) * inv_mult(2 * p.y, self.prime)) % self.prime
+        else:
+            if p.x == q.x:
+                return None
+            m = ((q.y - p.y) * inv_mult(q.x - p.x, self.prime)) % self.prime
+
+        x3 = (m ** 2 - p.x - q.x) % self.prime
+        y3 = (m * (p.x - x3) - p.y) % self.prime
+
+        return Point(x3, y3)
 
     def mult(self, k, p):
         '''Suma  k veces el punto p (o k(P)).
         Si k < 0 entonces se suma el inverso de P k veces'''
+        if k < 0:
+            k, p = -k, self.inv(p)
+
+        result, current = None, p
+        while k > 0:
+            if k & 1:
+                result = self.sum(result, current)
+            current = self.sum(current, current)
+            k >>= 1
+
+        return result
 
     def order(self, p):
         '''Dado el punto p que pertenece a la curva elíptica, nos regresa el mínimo entero k 
         tal que  k(P) = punto al infinito.'''
+        k, current = 1, p
+        while current is not None and k <= len(self.points):
+            current = self.sum(current, p)
+            k += 1
+
+        return k
 
     def cofactor(self, p):
         '''Dado el punto p de la curva, regresa el total de puntos de la curva entre el orden
         de ese punto'''
+        return len(self.points) / self.order(p)
 
     def inv(self, p):
         '''Regresa el inverso aditivo de este punto. Recuerda que es el mismo punto reflejado
         en el eje x'''
+        if p is None:
+            return None
+
+        return Point(p.x, inv_add(p.y, self.prime))
 
diff --git a/Practicas/Practica10/p10/elipic_curves/src/Entity.py b/Practicas/Practica10/p10/elipic_curves/src/Entity.py
index 1c12e38..bb5b31a 100644
--- a/Practicas/Practica10/p10/elipic_curves/src/Entity.py
+++ b/Practicas/Practica10/p10/elipic_curves/src/Entity.py
@@ -21,10 +21,14 @@ class Entity:
         self.name = name
         self.curve = curve
         self.generator_point = generator_point
-        self.order =
+        self.order = self.curve.order(generator_point)
         ## Cosas privadas
-        self.private_key =
-        self.private_point =
+        self.private_key = r.randint(1, self.order - 1)
+        # Punto privado
+        while True:
+            self.private_point = r.choice(self.curve.points[1:])
+            if self.curve.sum(generator_point, self.private_point) is not None:
+                break
         # Cosas publicas
         self.public_key_1 = None #Public key using private point
         self.public_key_2 = None #Public key using only private key
@@ -39,57 +43,120 @@ class Entity:
 
     def __str__(self):
         '''Representacion en cadena de la entidad'''
+        return f"{self.name}:\nEC: {self.curve}\nG: {self.generator_point}\nPrivate Key: {self.private_key}\nPrivate Point: {self.private_point}\n"
 
     def descifrar(self, ciphered_msg):
         '''Descifra un conjunto de parejas de puntos (e1, e2) de una curva elíptica a un texto
         plano legible humanamente'''
 
-        # print(f'{self.name} descifró el mensaje! Dice: "{s}"')
-        return s
+        if not ciphered_msg:
+            return ""
+
+        plain = ""
+        for e1_char, e2_char in ciphered_msg:
+            try:
+                e1 = self.table[e1_char]
+                e2 = self.table[e2_char]
+
+                # Inversión de operaciones para obtener P
+                temp1 = self.curve.mult(self.private_key, e1)
+                temp2 = self.curve.mult(self.private_key, self.another_entity_public_key_1)
+                sum_temp = self.curve.sum(temp1, temp2)
+                sum_temp = self.curve.sum(sum_temp, self.another_entity_public_key_3)
+                sum_temp = self.curve.inv(sum_temp)
+
+                # Recuperar el punto original del mensaje
+                P = self.curve.sum(e2, sum_temp)
+
+                # Mapeo del punto a un carácter en la tabla
+                found = False
+                for k, v in self.table.items():
+                    if v == P:
+                        plain += k
+                        found = True
+                        break
+
+                # Si el punto P no tiene mapeo, agrega un espacio
+                if not found:
+                    plain += " "
+
+            except Exception as e:
+                plain += " "
+
+        return plain
 
 
     def cifrar(self, message):
         '''Cifra el mensaje (self.message) a puntos de la curva elíptica. Cada caracter es 
         mapeado a una pareja de puntos (e1, e2) con e1, e2 en EC.'''
         # Se usa un random para cada símbolo
-        # print(f'{self.name} cifra el mensaje "{self.message}" como: ')
         if not message:
             return []
-        values = list(self.table.values())
-        keys = list(self.table.keys())
-        self.cipher = []
 
-        # print(self.cipher)
-        return self.cipher
+        cipher = []
+        for char in message:
+            # Asegúrate de que el carácter está en la tabla
+            if char not in self.table:
+                print(f"Advertencia: carácter '{char}' no encontrado en la tabla")
+                continue
+
+            # Mapeo de caracteres a puntos
+            M = self.table[char]
+            r_value = r.randint(1, self.order - 1)
+
+            # Genera el primer punto del cifrado
+            e1 = self.curve.mult(r_value, self.generator_point)
+
+            # Genera el segundo punto del cifrado
+            temp1 = self.curve.mult(self.private_key + r_value, self.another_entity_public_key_1)
+            temp2 = self.curve.mult(r_value, self.another_entity_public_key_2)
+            temp2 = self.curve.inv(temp2)
+
+            e2 = self.curve.sum(M, temp1)
+            e2 = self.curve.sum(e2, temp2)
+            e2 = self.curve.sum(e2, self.another_entity_public_key_3)
+
+            # Mapeo de puntos de cifrado a caracteres
+            e1_char = e2_char = None
+            for k, v in self.table.items():
+                if v == e1:
+                    e1_char = k
+                if v == e2:
+                    e2_char = k
+                if e1_char and e2_char:
+                    break
+
+            # Manejo de espacios como caracteres de respaldo
+            first_char = next(iter(self.table))
+            cipher.append((e1_char or first_char, e2_char or first_char))
+
+        return cipher
 
     def genera_llaves_publicas(self):
         '''Hace las operaciones correspondientes para generar la primera ronda de llaves
         públicas de esta entidad PK1 y PK2.'''
-        self.public_key_1 =
-        self.public_key_2 =
-        # print(f'{self.name} genera sus llaves públicas como \npk1{self.public_key_1}\tpk2{self.public_key_2}')
-        return (self.public_key_1, self.public_key_2, None)
+        sum_point = self.curve.sum(self.generator_point, self.private_point)
+        self.public_key_1 = self.curve.mult(self.private_key, sum_point)
+        self.public_key_2 = self.curve.mult(self.private_key, self.private_point)
+
+        if not self.public_key_1 or not self.public_key_2:
+            raise ValueError("Error al generar llaves públicas")
+
+        return [self.public_key_1, self.public_key_2]
 
     def recibe_llaves_publicas(self, public_keys):
         '''Recibe la llave publica de otra entidad y las guarda. (primera ronda solo guarda 2)
         o si ya es la segunda ronda, guarda la última llave (pk1, pk2 y pk3 != None)'''
         # print(public_keys) puede ser que alguna llave sea None, pero lo evitaremos por
         # motivos didácticos, pero no pasa nada, sigue funcionando
-        if public_keys[2] == None:
-            # print(f'{self.name} añadió una llave pública más: {public_keys}\n')
-            self.another_entity_public_key_3 =
+        if len(public_keys) == 2:
+            self.another_entity_public_key_1, self.another_entity_public_key_2 = public_keys
         else:
-            self.another_entity_public_key_1 =
-            self.another_entity_public_key_2 =
-            # print(f'{self.name} recibe las llaves públicas de otra entidad y son: {public_keys}')
+            self.another_entity_public_key_3 = public_keys[2]
 
     def final_keys(self):
         '''Genera la última llave pública, en combinación con otra llave pública de otra entidad
         Regresa las 3 llaves públicas de esta entidad.'''
-        public_keys = (self.public_key_1, self.public_key_2, None)
-        self.public_key_3 =
-        public_keys[2] = self.public_key_3
-        # print(f'{self.name} crea su llave final como {self.public_key_3}')
-        # print(f'Todas las llaves publicas de {self.name} son: {public_keys}\n')
-        return public_keys
+        self.public_key_3 = self.curve.mult(self.private_key, self.another_entity_public_key_2)
+        return (self.public_key_1, self.public_key_2, self.public_key_3)
 
diff --git a/Practicas/Practica10/p10/elipic_curves/src/Point.py b/Practicas/Practica10/p10/elipic_curves/src/Point.py
index 3c4f03d..9d4564d 100644
--- a/Practicas/Practica10/p10/elipic_curves/src/Point.py
+++ b/Practicas/Practica10/p10/elipic_curves/src/Point.py
@@ -6,18 +6,36 @@ class Point:
 
     def __init__(self, x = 0, y = 0):
         '''Constructor: Construye un punto en un plano 2D con coordenadas (x,y)'''
+        try:
+            self.x, self.y = int(float(x)), int(float(y))
+        except (ValueError, TypeError):
+            self.x, self.y = 0, 0
 
     def __str__(self):
         '''Representación en cadena. Usamos str(p)'''
+        return "Punto al infinito" if self == Point.infinite_point else f"({self.x}, {self.y})"
 
     def __repr__(self):
         '''Representación en cadena x2. Usamos print(p)'''
+        return self.__str__()
 
     def __eq__(self, another_point):
         '''Comparación entre 2 puntos. Usamos ==
         another_point debe ser instancia de Point'''
+        if not isinstance(another_point, Point) and another_point is not None:
+            return False
+        if self is Point.infinite_point or another_point is Point.infinite_point:
+            return self is another_point
+        return self.x == another_point.x and self.y == another_point.y
 
     def set(self, x, y):
         '''Reescribe los valores de x y y a este punto.
         @raise ValueError si x o y no son números enteros'''
+        try:
+            nuevo_punto_x = int(float(x))
+            nuevo_punto_y = int(float(y))
+            self.x = nuevo_punto_x
+            self.y = nuevo_punto_y
+        except (ValueError, TypeError):
+            pass
 
diff --git a/Practicas/Practica10/p10/elipic_curves/src/__pycache__/EllipticCurve.cpython-310.pyc b/Practicas/Practica10/p10/elipic_curves/src/__pycache__/EllipticCurve.cpython-310.pyc
new file mode 100644
index 0000000..7cd8977
Binary files /dev/null and b/Practicas/Practica10/p10/elipic_curves/src/__pycache__/EllipticCurve.cpython-310.pyc differ
diff --git a/Practicas/Practica10/p10/elipic_curves/src/__pycache__/Entity.cpython-310.pyc b/Practicas/Practica10/p10/elipic_curves/src/__pycache__/Entity.cpython-310.pyc
new file mode 100644
index 0000000..e6618d7
Binary files /dev/null and b/Practicas/Practica10/p10/elipic_curves/src/__pycache__/Entity.cpython-310.pyc differ
diff --git a/Practicas/Practica10/p10/elipic_curves/src/__pycache__/Point.cpython-310.pyc b/Practicas/Practica10/p10/elipic_curves/src/__pycache__/Point.cpython-310.pyc
new file mode 100644
index 0000000..787adeb
Binary files /dev/null and b/Practicas/Practica10/p10/elipic_curves/src/__pycache__/Point.cpython-310.pyc differ
diff --git a/Practicas/Practica10/p10/elipic_curves/src/__pycache__/tools.cpython-310.pyc b/Practicas/Practica10/p10/elipic_curves/src/__pycache__/tools.cpython-310.pyc
new file mode 100644
index 0000000..bdafdfe
Binary files /dev/null and b/Practicas/Practica10/p10/elipic_curves/src/__pycache__/tools.cpython-310.pyc differ
diff --git a/Practicas/Practica10/p10/elipic_curves/src/main.py b/Practicas/Practica10/p10/elipic_curves/src/main.py
index d5f5d0f..2c5e904 100644
--- a/Practicas/Practica10/p10/elipic_curves/src/main.py
+++ b/Practicas/Practica10/p10/elipic_curves/src/main.py
@@ -9,6 +9,7 @@ import sys
 # b = int(sys.argv[3])
 
 # Curva que soporta 256 caracteres
+ascii_alphabet = [chr(i) for i in range(256)]
 eli = EllipticCurve(233, -2, 8)
 g = eli.points[-1]
 # print(g)
@@ -16,13 +17,12 @@ g = eli.points[-1]
 # print(eli.order(g))
 # print(eli.cofactor(g))
 
-code = table(eli)
+code = table(eli, ascii_alphabet)
 
 print("CREACIÓN DE ENTIDADES CON CURVAS\n\n")
 a = Entity("Allice", eli, g, code)
-msg_a = "Las ideas siempre son borrosas al inicio, pero se van aclarando mientras trabajas en ellas. -El zucaritas"
 b = Entity("Bob", eli, g, code)
-msg_b = "The fears we don't face, become our limits."
+msg_b = "Perro salchicha, gordo bachicha."
 
 print(a)
 print(b)
@@ -49,8 +49,12 @@ b.recibe_llaves_publicas(pub_k_a)
 
 print()
 print("CIFRADO DE MENSAJE")
+print(f"Cifrando el mensaje: {msg_b}")
+print()
 enc = b.cifrar(msg_b)
 print("Mensaje cifrado:", enc)
 denc = a.descifrar(enc)
-print("Mensaje descifrado:", denc)
+print()
+print(f"\nMensaje descifrado:", denc)
+print("El mensaje fue descifrado con éxito")
 
diff --git a/Practicas/Practica10/p10/elipic_curves/src/test/__pycache__/testEllipticCurve.cpython-310.pyc b/Practicas/Practica10/p10/elipic_curves/src/test/__pycache__/testEllipticCurve.cpython-310.pyc
new file mode 100644
index 0000000..b9eaafb
Binary files /dev/null and b/Practicas/Practica10/p10/elipic_curves/src/test/__pycache__/testEllipticCurve.cpython-310.pyc differ
diff --git a/Practicas/Practica10/p10/elipic_curves/src/test/__pycache__/testEntity.cpython-310.pyc b/Practicas/Practica10/p10/elipic_curves/src/test/__pycache__/testEntity.cpython-310.pyc
new file mode 100644
index 0000000..fb5a623
Binary files /dev/null and b/Practicas/Practica10/p10/elipic_curves/src/test/__pycache__/testEntity.cpython-310.pyc differ
diff --git a/Practicas/Practica10/p10/elipic_curves/src/test/__pycache__/testPoint.cpython-310.pyc b/Practicas/Practica10/p10/elipic_curves/src/test/__pycache__/testPoint.cpython-310.pyc
new file mode 100644
index 0000000..bbbef3c
Binary files /dev/null and b/Practicas/Practica10/p10/elipic_curves/src/test/__pycache__/testPoint.cpython-310.pyc differ
diff --git a/Practicas/Practica10/p10/elipic_curves/src/tools.py b/Practicas/Practica10/p10/elipic_curves/src/tools.py
index 9728c7b..61334d2 100644
--- a/Practicas/Practica10/p10/elipic_curves/src/tools.py
+++ b/Practicas/Practica10/p10/elipic_curves/src/tools.py
@@ -1,14 +1,26 @@
 # Default alphabet
-alphabet = 'ABC'
+alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,.!¡?¿#_'
 
 def isPrime(n):
     '''Nos dice si un número n es primo'''
+    if n < 2:
+        return False
+    for i in range(2, int(n ** 0.5) + 1):
+        if n % i == 0:
+            return False
+    return True
 
 def inv_add(a, mod):
     '''Nos da el inverso aditivo tal que a + i == 0 modulo n'''
+    return (-a) % mod
+
 
 def inv_mult(a, mod):
     '''Nos da el inverso multiplicativo modulo n'''
+    for i in range(1, mod):
+        if (a * i) % mod == 1:
+            return i
+    raise ValueError(f"El inverso multiplicativo de {a} mod {mod} no existe")
 
 def table(elliptic_curve, alphabet = alphabet):
     '''Regesa una tabla de un abecedario mapeado a puntos de la curva elíptica e'''
